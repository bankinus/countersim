countermachineprogram	:=	{minskyprogram, srmprogram, urmprogram}

minskyprogram := minskytype [configcommand*] [minskysubroutine* 'main' NEWLINE]([label ':'] minskyinstruction NEWLINE)*
minskytype := '#' 'machine' 'minsky' NEWLINE
minskysubroutine := 'def' subroutinename registername* '['exitname*']' NEWLINE ([label ':'] minskyinstruction NEWLINE)*
minskyinstruction := {add, sub, subroutinecall}
add := 'add' target_register [target_instruction]
sub := 'sub' target_register [target_instruction] target_instruction

srmprogram := srmtype [configcommand*] [srmsubroutine* 'main' NEWLINE]([label ':'] srminstruction NEWLINE)*
srmtype := '#' 'machine' 'srm' NEWLINE
srmsubroutine := 'def' subroutinename registername* '['exitname*']' NEWLINE ([label ':'] srminstruction NEWLINE)*
srminstruction := {mul, div, subroutinecall}
mul := 'mul' target_register [target_instruction]
div := 'div' target_register [target_instruction] target_instruction

urmprogram := {urmtype, lrmtype} [configcommand*] [urmsubroutine*]([label ':'] urminstruction NEWLINE)*
urmtype := '#' 'machine' 'urm' NEWLINE
lrmtype := '#' 'machine' 'lrm' INTEGER NEWLINE
urmsubroutine := 'def' subroutinename registername* '['exitname*']' NEWLINE ([label ':'] urminstruction NEWLINE)*
urminstruction := {inc, dec, clear, copy, jump, jiz, subroutinecall}
inc	:= 'inc' target_register
dec	:= 'dec' target_register
clear	:= 'clr' target_register
copy	:= 'cpy' target_register target_register
jump	:= 'jmp' target_instruction
jiz	:= 'jiz' target_register target_instruction

subroutinecall := 'call' subroutinename target_register* '['target_instruction*']'
configcommand	:= '#' {setregister, break} NEWLINE
setregister	:= 'set'INTEGER INTEGER
break	:= 'break' INTEGER

target_instruction := {INTEGER, NAME, 'exit0'}
target_register := {INTEGER, NAME}
label := NAME
subroutinename := NAME
registername := NAME
exitname := NAME

